version: '3.8'
services:
  backend:
    build: ./backend
    container_name: backend
    restart: unless-stopped
    env_file:
      - .env  # Root .env file
    environment:
      - PORT=${BACKEND_PORT}
    ports:
      - "${BACKEND_DEBUG_PORT}:${BACKEND_PORT}"  # Expose untuk debugging
    networks:
      - app-network

  frontend:
    build: 
      context: ./frontend
      args:
        - VITE_API_URL=${VITE_API_URL}
        - VITE_ML_API_URL=${VITE_ML_API_URL}
        - VITE_FLASK_API_URL=${VITE_FLASK_API_URL}
    container_name: frontend
    restart: unless-stopped
    env_file:
      - .env  # Root .env file
    ports:
      - "${FRONTEND_DEBUG_PORT}:${FRONTEND_PORT}"  # Expose untuk debugging
    depends_on:
      - backend
    networks:
      - app-network

  flask-api:
    build: ./flask-api
    container_name: flask-api
    restart: unless-stopped
    env_file:
      - .env  # Root .env file
    environment:
      - PORT=${FLASK_PORT}
      # PENTING: Pastikan Flask mendengarkan di port yang konsisten
      - FLASK_RUN_PORT=${FLASK_PORT}
      - FLASK_RUN_HOST=0.0.0.0
    ports:
      - "${FLASK_DEBUG_PORT}:${FLASK_PORT}"  # Expose untuk debugging
    depends_on:
      - backend
    networks:
      - app-network

  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "${NGINX_PORT}:80"  # Main port untuk akses aplikasi
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
      - flask-api
    networks:
      - app-network

networks:
  app-network:
    driver: bridge